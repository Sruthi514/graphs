You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4




class Solution {
    public boolean inside(int[][] grid,int r1,int c1){
        int R=grid.length;
        int C=grid[0].length;
        return(r1>=0 && r1<R && c1>=0 && c1<C && grid[r1][c1]==1);
    }
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        if(n==0){
            return 0;
        }
        int r=grid.length;
        int c=grid[0].length;
        Queue<int[]> q=new LinkedList<>();
        int t=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    int[] a=new int[2];
                    a[0]=i;
                    a[1]=j;
                    q.add(a);
                    
                }
                else if(grid[i][j]==1){
                    t+=1;
                }
                
            }
        }
        if(t==0)
            return 0;
        int[] row=new int[] {1,-1,0,0};
        int[] col=new int[] {0,0,1,-1};
        int time=0;
        while(!q.isEmpty()){
            time+=1;
            int m=q.size();
            for(int i=0;i<m;i++){
                int[] x=q.poll();
                for(int i1=0;i1<4;i1++){
                    int r1=x[0];
                    int c1=x[1];
                    if(inside(grid,r1+row[i1],c1+col[i1])){
                        grid[r1+row[i1]][c1+col[i1]]=2;
                        int [] b=new int[2];
                        b[0]=r1+row[i1];
                        b[1]=c1+col[i1];
                        q.add(b);
                        t-=1;
                    }
                    else
                        continue;
                }
            }
        }
        int k1=0;
        if(t==0)
            k1=time-1;
        else
            k1=-1;
        return k1;
        
    }
}